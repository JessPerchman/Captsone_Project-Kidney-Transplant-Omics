gseB <- gse
gseB$Outcome <- ifelse(grepl("non", gseB$characteristics_ch1), "Rejection", "Stable") #Tidy the title variable and call it Outcome.
design_B <- model.matrix(~Outcome, data = pData(gseB))
fit_B <- lmFit(exprs(gseB), design_B)
fit_B<- eBayes(fit_B)
tT_B <- topTable(fit_B, genelist=str_split_i(fData(gseB)$gene_assignment, " // ", 2), n = 300)
DT::datatable(tT_B)
overlapping_genes <- intersect(tT_A$ID, tT_B$ID)
overlapping_genes
set.seed(3888)
tG50_A <- topTable(fit_A, genelist=str_split_i(fData(gseA)$"Gene Symbol", " /// ", 1), n = 50)
gseA_sub <- gseA[rownames(tG50_A)]
gseA_sub$Outcome <- ifelse(grepl("AR", gseA_sub$title), "Rejection", "Stable")
X_a = as.matrix(t(exprs(gseA_sub[,])))
y_a = gseA_sub$Outcome
n_a = length(y_a)
K = 5  # number of CV folds
# initialise results vector
cv_acc_a = NA
acc_a = NA
j = 1
for (i in 1:50) {
cvSets = cvTools::cvFolds(nrow(X_a), K)
for (j in 1:K) {
test_id = sample(1:n_a, round(n_a * 0.20))
X_test = X_a[test_id, ]
X_train = X_a[-test_id, ]
y_test=y_a[test_id]
y_train=y_a[-test_id]
svm_res = e1071::svm(x = X_train, y = as.factor(y_train))
fit = predict(svm_res, X_test)
cv_acc_a[j] = mean(fit == y_test)
}
acc_a[i] = mean(cv_acc_a)
}
mean(acc_a)
boxplot(acc_a)
set.seed(3888)
tG50_B <- topTable(fit_B, genelist=str_split_i(fData(gseB)$gene_assignment, " // ", 2), n = 50)
gseB_sub <- gseB[rownames(tG50_B)]
gseB_sub$Outcome <- ifelse(grepl("non", gseB$characteristics_ch1), "Rejection", "Stable")
X_b = as.matrix(t(exprs(gseB_sub[,])))
y_b = gseB_sub$Outcome
n_b = length(y_b)
K = 5  # number of CV folds
# initialise results vector
cv_acc_b = NA
acc_b = NA
j = 1
for (i in 1:50) {
cvSets = cvTools::cvFolds(nrow(X_b), K)
for (j in 1:K) {
test_id = sample(1:n_b, round(n_b * 0.20))
X_test = X_b[test_id, ]
X_train = X_b[-test_id, ]
y_test=y_b[test_id]
y_train=y_b[-test_id]
svm_res = e1071::svm(x = X_train, y = as.factor(y_train))
fit = predict(svm_res, X_test)
cv_acc_b[j] = mean(fit == y_test)
}
acc_b[i] = mean(cv_acc_b)
}
mean(acc_b)
boxplot(acc_b)
test_id <- sample(nrow(gseA), round(nrow(gseA) * 0.8))
train_data <- gseA[test_id, ]
test_data <- gseA[-test_id, ]
train_data$Outcome <- ifelse(grepl("AR", train_data$title), "Rejection", "Stable") #Tidy the title variable and call it Outcome.
design_A <- model.matrix(~Outcome, data = pData(train_data))
fit_A <- lmFit(exprs(train_data), design_A)
fit_A<- eBayes(fit_A)
tG50_A <- topTable(fit_A, genelist=str_split_i(fData(gseA)$"Gene Symbol", " /// ", 1), n = 50)
gseA_sub <- gseA[rownames(tG50_A)]
gseA_sub$Outcome <- ifelse(grepl("AR", gseA_sub$title), "Rejection", "Stable")
X_a = as.matrix(t(exprs(gseA_sub[,])))
y_a = gseA_sub$Outcome
n_a = length(y_a)
K = 5  # number of CV folds
# initialise results vector
cv_acc_a = NA
acc_a = NA
j = 1
for (i in 1:50) {
cvSets = cvTools::cvFolds(nrow(X_a), K)
for (j in 1:K) {
test_id = sample(1:n_a, round(n_a * 0.20))
X_test = X_a[test_id, ]
X_train = X_a[-test_id, ]
y_test=y_a[test_id]
y_train=y_a[-test_id]
svm_res = e1071::svm(x = X_train, y = as.factor(y_train))
fit = predict(svm_res, X_test)
cv_acc_a[j] = mean(fit == y_test)
}
acc_a[i] = mean(cv_acc_a)
}
mean(acc_a)
boxplot(acc_a)
test_id <- sample(nrow(gseB), round(nrow(gseB) * 0.8))
train_data <- gseB[test_id, ]
test_data <- gseB[-test_id, ]
train_data$Outcome <- ifelse(grepl("non", train_data$characteristics_ch1), "Rejection", "Stable") #Tidy the title variable and call it Outcome.
design_B <- model.matrix(~Outcome, data = pData(train_data))
fit_B <- lmFit(exprs(train_data), design_B)
fit_B<- eBayes(fit_B)
tG50_B <- topTable(fit_B, genelist=str_split_i(fData(train_data)$gene_assignment, " // ", 2), n = 50)
gseB_sub <- train_data[rownames(tG50_B)]
gseB_sub$Outcome <- ifelse(grepl("non", gseB$characteristics_ch1), "Rejection", "Stable")
X_b = as.matrix(t(exprs(gseB_sub[,])))
y_b = gseB_sub$Outcome
n_b = length(y_b)
K = 5  # number of CV folds
# initialise results vector
cv_acc_b = NA
acc_b = NA
j = 1
for (i in 1:50) {
cvSets = cvTools::cvFolds(nrow(X_b), K)
for (j in 1:K) {
test_id = sample(1:n_b, round(n_b * 0.20))
X_test = X_b[test_id, ]
X_train = X_b[-test_id, ]
y_test=y_b[test_id]
y_train=y_b[-test_id]
svm_res = e1071::svm(x = X_train, y = as.factor(y_train))
fit = predict(svm_res, X_test)
cv_acc_b[j] = mean(fit == y_test)
}
acc_b[i] = mean(cv_acc_b)
}
mean(acc_b)
boxplot(acc_b)
library(tuneR)
library(signal)
LR_detection <- function(seq) {
maxval <- which.max(seq)
minval <- which.min(seq)
movement <- ifelse(maxval < minval, "L", "R")
return(movement)
}
classify_LR_movement <- function(wav_file) {
wav <- readWave(wav_file)
sig <- as.vector(wav@left)
window_size <- 1000
overlap <- 500
result <- rep(NA, length(sig))
for (i in seq(from=1, to=length(sig)-window_size+1, by=overlap)) {
window <- sig[i:(i+window_size-1)]
result[i:(i+window_size-1)] <- LR_detection(window)
}
result <- result[!is.na(result)]
return(result)
}
# function to calculate accuracy metric
accuracy <- function(actual, predicted, movement) {
tp <- sum(actual == movement & predicted == movement)
tn <- sum(actual != movement & predicted != movement)
fp <- sum(actual != movement & predicted == movement)
fn <- sum(actual == movement & predicted != movement)
if (tp == 0 & fn == 0) {
return(NA)
} else {
return((tp + tn) / (tp + tn + fp + fn))
}
}
dir_length3 <- "zoe_spiker/Length3"
files_length3 <- list.files(dir_length3)
# initialize the accuracy vector
acc <- rep(NA, length(files_length3))
# calculate accuracy for each file
for (i in 1:length(files_length3)) {
file <- paste0(dir_length3, "/", files_length3[i])
actual <- substr(files_length3[i], 1, 1)
predicted <- classify_LR_movement(file)
acc[i] <- accuracy(actual, predicted, "L")
}
# calculate the mean accuracy
mean_acc <- mean(acc, na.rm = TRUE)
# print the mean accuracy
cat("Accuracy for length3 wave files is:", mean_acc, "\n")
# Rule 1: Using maximum amplitude of the window
LR_detection_1 <- function(seq) {
maxval <- which.max(seq)
minval <- which.min(seq)
movement <- ifelse(maxval < minval, "L", "R")
return(movement)
}
# Rule 2: Using the sum of the absolute values of the window
LR_detection_2 <- function(seq) {
skew_val <- skewness(seq)
movement <- ifelse(skew_val < 0, "L", "R")
return(movement)
}
# Rule 3: Using the mean of the window
LR_detection_3 <- function(seq) {
mean_val <- mean(seq)
movement <- ifelse(mean_val > 0, "L", "R")
return(movement)
}
# Rule 4: Using the median of the window
LR_detection_4 <- function(seq) {
median_val <- median(seq)
movement <- ifelse(median_val > 0, "L", "R")
return(movement)
}
# Classification function using different rules
classify_LR_movement_diff <- function(wav_file, rule) {
wav <- readWave(wav_file)
sig <- as.vector(wav@left)
window_size <- 1000
overlap <- 500
result <- rep(NA, length(sig))
for (i in seq(from=1, to=length(sig)-window_size+1, by=overlap)) {
window <- sig[i:(i+window_size-1)]
result[i:(i+window_size-1)] <- rule(window)
}
result <- result[!is.na(result)]
return(result)
}
dir_length3 <- "zoe_spiker/Length3"
files_length3 <- list.files(dir_length3)
# Rule 1
# initialize the accuracy vector
acc_1 <- rep(NA, length(files_length3))
# calculate accuracy for each file
for (i in 1:length(files_length3)) {
file <- paste0(dir_length3, "/", files_length3[i])
actual <- substr(files_length3[i], 1, 1)
predicted <- classify_LR_movement_diff(file, LR_detection_1)
acc_1[i] <- accuracy(actual, predicted, "L")
}
# calculate the mean accuracy
mean_acc <- mean(acc_1, na.rm = TRUE)
# print the mean accuracy
cat("Accuracy for rule 1 is:", mean_acc, "\n")
boxplot(acc_1)
# Rule 2
# initialize the accuracy vector
acc_2 <- rep(NA, length(files_length3))
# calculate accuracy for each file
for (i in 1:length(files_length3)) {
file <- paste0(dir_length3, "/", files_length3[i])
actual <- substr(files_length3[i], 1, 1)
predicted <- classify_LR_movement_diff(file, LR_detection_2)
acc_2[i] <- accuracy(actual, predicted, "L")
}
# calculate the mean accuracy
mean_acc2 <- mean(acc_2, na.rm = TRUE)
# print the mean accuracy
cat("Accuracy for rule 2 is:", mean_acc2, "\n")
boxplot(acc_2)
# Rule 3
# initialize the accuracy vector
acc_3 <- rep(NA, length(files_length3))
# calculate accuracy for each file
for (i in 1:length(files_length3)) {
file <- paste0(dir_length3, "/", files_length3[i])
actual <- substr(files_length3[i], 1, 1)
predicted <- classify_LR_movement_diff(file, LR_detection_3)
acc_3[i] <- accuracy(actual, predicted, "L")
}
# calculate the mean accuracy
mean_acc3 <- mean(acc_3, na.rm = TRUE)
# print the mean accuracy
cat("Accuracy for rule 3 is:", mean_acc3, "\n")
boxplot(acc_3)
# Rule 4
# initialize the accuracy vector
acc_4 <- rep(NA, length(files_length3))
# calculate accuracy for each file
for (i in 1:length(files_length3)) {
file <- paste0(dir_length3, "/", files_length3[i])
actual <- substr(files_length3[i], 1, 1)
predicted <- classify_LR_movement_diff(file, LR_detection_4)
acc_4[i] <- accuracy(actual, predicted, "L")
}
# calculate the mean accuracy
mean_acc4 <- mean(acc_4, na.rm = TRUE)
# print the mean accuracy
cat("Accuracy for rule 4 is:", mean_acc4, "\n")
boxplot(acc_4)
df <- data.frame(Rule = c("Rule 1", "Rule 2", "Rule 3", "Rule 4"),
Accuracy = c(mean_acc1, mean_acc2, mean_acc3, mean_acc4))
df <- data.frame(Rule = c("Rule 1", "Rule 2", "Rule 3", "Rule 4"),
Accuracy = c(mean_acc, mean_acc2, mean_acc3, mean_acc4))
# Create a bar plot to compare the mean accuracy values
library(ggplot2)
ggplot(df, aes(x = Rule, y = Accuracy)) +
geom_bar(stat = "identity") +
xlab("Rule") +
ylab("Mean Accuracy") +
ggtitle("Comparison of 4 Different Classification Rules on the length 3 wave files")
knitr::opts_chunk$set(echo = TRUE)
library(GEOquery)
gse <- getGEO("GSE75693", GSEMatrix = TRUE)
library(GEOquery)
gse <- getGEO("GSE75693")
source("http://bioconductor.org/biocLite.R")
dev.off()
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
library(umap)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
library(umap)
install.packages("umap")
install.packages("umap")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE75693", GSEMatrix =TRUE, getGPL=FALSE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE75693", GSEMatrix =TRUE, getGPL=FALSE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE75693", GSEMatrix =TRUE, getGPL=FALSE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE174020", GSEMatrix =TRUE, getGPL=FALSE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE174020")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE25902")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE25902")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE25902")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE25902")
install.packages("bioconductor")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE25902")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gse <- getGEO("GSE25902")
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gse <- getGEO("GSE25902")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gse25902 <- getGEO("GSE25902")
gse131179 <- getGEO("GSE131179")
gse138043 <- getGEO("GSE138043")
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gse25902 <- getGEO("GSE25902")
gse131179 <- getGEO("GSE131179")
gse138043 <- getGEO("GSE138043")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gse25902 <- getGEO("GSE25902")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gse25902 <- getGEO("GSE25902")
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gse25902 <- getGEO("GSE25902")
gse131179 <- getGEO("GSE131179")
#gse138043 <- getGEO("GSE138043")
gse25902$Outcome <- ifelse(grepl("AR", gseA$title), "Rejection", "Stable") #Tidy the title variable and call it Outcome.
gse25902$Outcome <- ifelse(grepl("AR", gse25902$title), "Rejection", "Stable") #Tidy the title variable and call it Outcome.
design_gse25902 <- model.matrix(~Outcome, data = pData(gse25902))
gseA$Outcome <- ifelse(grepl("AR", gse25902$title), "Rejection", "Stable") #Tidy the title variable and call it Outcome.
gse25902$Outcome <- ifelse(grepl("AR", gse25902$title), "Rejection", "Stable") #Tidy the title variable and call it Outcome.
design_gse25902 <- model.matrix(~Outcome, data = pData(gse25902))
gse25902$Outcome <- ifelse(grepl("AR", gse25902$title), "Rejection", "Stable") #Tidy the title variable and call it Outcome.
pData(gse25902)
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902")
gseAdultB <- getGEO("GSE131179")
gseAdultC <- getGEO("GSE138043")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902")
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902")
gseAdultB <- getGEO("GSE131179")
gseAdultC <- getGEO("GSE138043")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902")
gseAdultB <- getGEO("GSE131179")
gseAdultC <- getGEO("GSE138043")
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902")
gseAdultB <- getGEO("GSE131179")
gseAdultC <- getGEO("GSE138043")
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902")
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902")
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902", GSEMatrix = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902", GSEMatrix = TRUE)
gseAdultB <- getGEO("GSE131179", GSEMatrix = TRUE)
gseAdultC <- getGEO("GSE138043", GSEMatrix = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902", GSEMatrix = TRUE)
gseAdultB <- getGEO("GSE131179", GSEMatrix = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902", GSEMatrix = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
# load series and platform data from GEO
gseAdultA <- getGEO("GSE25902")
gseAdultB <- getGEO("GSE131179")
shiny::runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
shiny::runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
shiny::runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
shiny::runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
runApp('DATA3888/Shiny')
shiny::runApp('DATA3888/Shiny')
shiny::runApp()
